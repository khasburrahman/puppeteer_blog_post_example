{"version":3,"sources":["component/todo.input.js","component/todo.content.js","component/todo.delete.button.js","App.js","serviceWorker.js","index.js"],"names":["TodoInput","handleChange","event","value","target","_this","props","todoSetInput","submit","todoSubmit","todoInputValue","this","react_default","a","createElement","style","width","name","data-testid","onChange","onClick","Component","TodoContent","todo","concat","id","backgroundColor","padding","content","TodoDelete","deleteItem","_this$props","deleteHandler","index","color","App","state","todos","todoInput","currentId","setState","undefined","push","Object","toConsumableArray","alert","todoDeleteItem","splice","_this2","_this$state","todo_input","map","data","key","display","marginTop","todo_content","todo_delete_button","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8KA6BeA,6MA1BXC,aAAe,SAACC,GACZ,IAAIC,EAAQD,EAAME,OAAOD,MACzBE,EAAKC,MAAMC,aAAaJ,MAG5BK,OAAS,WACLH,EAAKC,MAAMG,sFAGN,IACAC,EAAkBC,KAAKL,MAAvBI,eACL,OACIE,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,yBACAF,EAAAC,EAAAC,cAAA,SACIC,MAAO,CAACC,MAAM,OACdC,KAAK,OACLC,cAAY,kBACZC,SAAUR,KAAKV,aACfE,MAAOO,IACXE,EAAAC,EAAAC,cAAA,UAAQG,KAAK,qBAAqBC,cAAY,qBAAqBE,QAAST,KAAKH,QAAjF,kBArBQa,aCWTC,mLAVF,IACCC,EAASZ,KAAKL,MAAdiB,KACN,OACIX,EAAAC,EAAAC,cAAA,OAAKI,cAAA,gBAAAM,OAA6BD,EAAKE,IAAMV,MAAO,CAACW,gBAAgB,OAAQV,MAAM,QAC/EJ,EAAAC,EAAAC,cAAA,KAAGC,MAAO,CAACY,QAAQ,QAASJ,EAAKK,iBALvBP,aCWXQ,6MAVXC,WAAa,WAAM,IAAAC,EACgB1B,EAAKC,OACpC0B,EAFeD,EACTC,eADSD,EACME,gFAKrB,OAAOrB,EAAAC,EAAAC,cAAA,UAAQC,MAAO,CAACmB,MAAM,OAAQd,QAAST,KAAKmB,YAA5C,iBAPUT,aCiEVc,6MA7DbC,MAAQ,CACNC,MAAO,GACPC,UAAW,GACXC,UAAW,KAGbhC,aAAe,SAACJ,GACdE,EAAKmC,SAAS,CAACF,UAAUnC,OAG3BM,WAAa,WACXJ,EAAKmC,SAAS,SAACJ,EAAO9B,GAAU,IACzB+B,EAA+BD,EAA/BC,MAAOC,EAAwBF,EAAxBE,UAAWC,EAAaH,EAAbG,UAEvB,QAAkBE,IAAdH,GAAyC,KAAdA,GAAkC,OAAdA,EAAnD,CAKA,IAAIf,EAAO,CACTE,GAAGc,EACHX,QAAQU,GAIV,OAFAC,GAAa,EACbF,EAAMK,KAAKnB,GACJ,CACLc,MAAMM,OAAAC,EAAA,EAAAD,CAAKN,GACXC,UAAW,GACXC,aAbAM,MAAM,qHAkBZC,eAAiB,SAACb,GAChB5B,EAAKmC,SAAS,SAACJ,EAAO9B,GAAU,IACzB+B,EAASD,EAATC,MAEL,OADAA,EAAMU,OAAOd,EAAO,GACb,CAACI,MAAMM,OAAAC,EAAA,EAAAD,CAAIN,+EAIb,IAAAW,EAAArC,KAAAsC,EACoBtC,KAAKyB,MAA1BE,EADCW,EACDX,UAAWD,EADVY,EACUZ,MACjB,OACEzB,EAAAC,EAAAC,cAAA,OAAKW,GAAG,OACNb,EAAAC,EAAAC,cAACoC,EAAD,CAAWxC,eAAgB4B,EAAW7B,WAAYE,KAAKF,WAAYF,aAAcI,KAAKJ,eACtFK,EAAAC,EAAAC,cAAA,OAAKW,GAAG,mBAEJY,EAAMc,IAAI,SAACC,EAAMnB,GAAP,OACRrB,EAAAC,EAAAC,cAAA,OAAKuC,IAAKD,EAAK3B,GAAIV,MAAO,CAACuC,QAAQ,OAAQC,UAAU,QACnD3C,EAAAC,EAAAC,cAAC0C,EAAD,CAAajC,KAAM6B,IACnBxC,EAAAC,EAAAC,cAAC2C,EAAD,CAAYxB,MAAOA,EAAOD,cAAegB,EAAKF,6BApD5CzB,aCOEqC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAOpD,EAAAC,EAAAC,cAACmD,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.48b6219b.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nclass TodoInput extends Component {\r\n    handleChange = (event) => {\r\n        let value = event.target.value\r\n        this.props.todoSetInput(value)\r\n    }\r\n\r\n    submit = () =>{\r\n        this.props.todoSubmit()\r\n    }\r\n\r\n    render() {\r\n        let {todoInputValue} = this.props\r\n        return (\r\n            <div>\r\n                <h2>Input Todo:</h2>\r\n                <input \r\n                    style={{width:\"40%\"}} \r\n                    name=\"todo\" \r\n                    data-testid=\"todo-form-input\" \r\n                    onChange={this.handleChange} \r\n                    value={todoInputValue}/>\r\n                <button name=\"todo-button-submit\" data-testid=\"todo-button-submit\" onClick={this.submit}>Submit</button>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TodoInput;","import React, { Component } from 'react';\r\n\r\nclass TodoContent extends Component {\r\n    render() {\r\n        let { todo } = this.props\r\n        return (\r\n            <div data-testid={`todo-content-${todo.id}`} style={{backgroundColor:\"#ddd\", width:\"40%\"}}>\r\n                <p style={{padding:\"4px\"}}>{todo.content}</p>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TodoContent;","import React, { Component } from 'react';\r\n\r\nclass TodoDelete extends Component {\r\n    deleteItem = () => {\r\n        let { deleteHandler, index } = this.props\r\n        deleteHandler(index)\r\n    } \r\n\r\n    render() {\r\n        return <button style={{color:\"red\"}} onClick={this.deleteItem}>Delete</button>\r\n    }\r\n}\r\n\r\nexport default TodoDelete;","import React, { Component } from 'react'\nimport TodoInput from './component/todo.input'\nimport TodoContent from './component/todo.content'\nimport TodoDelete from './component/todo.delete.button'\n\nclass App extends Component {\n  state = {\n    todos: [],\n    todoInput: \"\",\n    currentId: 0,\n  }\n\n  todoSetInput = (value) => {\n    this.setState({todoInput:value})\n  }\n\n  todoSubmit = () => {\n    this.setState((state, props) => {\n      let {todos, todoInput, currentId} = state\n      \n      if (todoInput === undefined || todoInput === \"\" || todoInput === null){\n        alert(\"Really, don't you have anything to do?\\nAllright, just write \\\"I want to rule the world\\\" and you'll be fine\")\n        return\n      }\n\n      let todo = {\n        id:currentId, \n        content:todoInput\n      }\n      currentId += 1\n      todos.push(todo)\n      return {\n        todos: [...todos],\n        todoInput: \"\",\n        currentId\n      }\n    })\n  }\n\n  todoDeleteItem = (index) => {\n    this.setState((state, props) => {\n      let {todos} = state\n      todos.splice(index, 1)\n      return {todos:[...todos]}\n    })\n  }\n\n  render() {\n    let { todoInput, todos } = this.state\n    return (\n      <div id=\"app\">\n        <TodoInput todoInputValue={todoInput} todoSubmit={this.todoSubmit} todoSetInput={this.todoSetInput} />\n        <div id=\"todos-container\">\n          {\n            todos.map((data, index) => \n              <div key={data.id} style={{display:\"flex\", marginTop:\"8px\"}}>\n                <TodoContent todo={data} />\n                <TodoDelete index={index} deleteHandler={this.todoDeleteItem} />\n              </div>\n            )\n          }\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}